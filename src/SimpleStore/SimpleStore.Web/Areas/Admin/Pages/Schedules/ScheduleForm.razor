@using SimpleStore.Core.Entities.Schedules
@using SimpleStore.Core.Services.Schedules
@using SimpleStore.Web.Areas.Admin.Models.Schedules
@inherits OwningComponentBase

<Form id="schedule-form" Model="@Schedule" OnValidSubmit="@Save">
    <TabContainer>
        <Navigation>
            <TabLink Target="schedule-info" Active>Informações da Agenda</TabLink>
            <TabLink Target="availability">Disponibilidade</TabLink>
        </Navigation>
        <Content>
            <TabContent Id="schedule-info" Active>
                @if (!string.IsNullOrWhiteSpace(Schedule.Id))
                        {
                <FormField @bind-Value="@Schedule.Id" Label="ID" InputType="ValueOnly" />
                }
                <FormField @bind-Value="@Schedule.Name" Label="Nome" />
            </TabContent>
            <TabContent Id="availability">
                <AvailabilityForm @bind-Dates="Schedule.Dates" />
            </TabContent>
        </Content>
    </TabContainer>
</Form>

@code {
    private IScheduleService _scheduleService;

    [CascadingParameter] public NotificationsHub NotificationsHub { get; set; }

    [Parameter] public string Id { get; set; }
    [Parameter] public Schedule Schedule { get; set; }
    [Parameter] public EventCallback OnSuccessSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _scheduleService = (IScheduleService)ScopedServices.GetService(typeof(IScheduleService));

        Schedule = new Schedule { Id = Id };

        if (!string.IsNullOrWhiteSpace(Id))
            await Load(Id);
    }

    public async Task Save()
    {
        var count = 0;

        if (string.IsNullOrEmpty(Schedule.Id))
            count = await _scheduleService.Insert(Schedule);
        else
            count = await _scheduleService.Update(Schedule);

        if (count > 0)
        {
            NotificationsHub.Send(new Notification
            {
                Message = "As alterações foram salvas.",
                Type = NotificationType.Success
            });
        }
        else
        {
            NotificationsHub.Send(new Notification
            {
                Message = "Ocorreu um erro ao salvar as notificações.",
                Type = NotificationType.Danger
            });
        }

        await OnSuccessSubmit.InvokeAsync();
    }

    public async Task Load(string id)
    {
        Schedule = await _scheduleService.GetById(id, true);
    }
}