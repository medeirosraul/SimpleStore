@using SimpleStore.Core.Entities.Schedules
@using SimpleStore.Core.Services.Schedules
@using SimpleStore.Web.Areas.Admin.Models.Schedules
@inject IPeriodProvider PeriodProvider

<h4>Disponibilidade</h4>

<div class="row">
    <div class="col-12">
        <Calendar @bind-BaseDate="BaseDate" @bind-SelectedDates="TemporarySelectedDates" MarkedDates="MarkedDates" ShowSelectedDates MonthClasses="col-12 col-lg-8 col-xl-6 mb-3"/>
    </div>

    <div class="col-12 mt-3 mb-3">
        <h5>Configuração de período</h5>
        <p class="text-muted">A configuração seguinte será aplicada às datas selecionadas.</p>

        <PeriodForm @bind-Periods="TemporaryConfiguredPeriods" OnApply="PeriodsApplied"></PeriodForm>
    </div>
    <div class="col-12 mt-3">
        <hr class="col-12" />
        <h4>Datas configuradas</h4>
        <div class="row">
            <div class="col-12">
                <h3>
                    <button class="btn btn-light" type="button" @onclick="@(() => AddMonth(-1))"><span class="iconify" data-icon="fluent:arrow-up-20-regular" data-width="20" data-height="20"></span></button>
                    <button class="btn btn-light" type="button" @onclick="@(() => AddMonth(1))"><span class="iconify" data-icon="fluent:arrow-down-20-regular" data-width="20" data-height="20"></span></button>
                    @BaseDate.ToString("MMMM/yyyy")
                </h3>
            </div>
            @{
                var currentMonthDays = Dates?.Where(p => p.DateTime.Year == BaseDate.Year && p.DateTime.Month == BaseDate.Month).ToList();
            }

            @if (currentMonthDays == null || currentMonthDays.Count == 0)
            {
                <p class="text-muted">Nenhuma data configurada para @BaseDate.ToString("MMMM 'de' yyyy")</p>
            }
            else
            {
                foreach(var date in currentMonthDays)
                {
                    var periodCounter = 1;

                    <div class="col-12 mt-2">
                        <div class="card @(date.Deleted ? " opacity-33" : "")">
                            <div class="card-body">
                                <h5 class="text-muted">@date.DateTime.ToString("D")</h5>
                                @foreach(var period in date.Periods)
                                {
                                    <p class="mb-0 mt-2">Período #@periodCounter</p>
                                    @foreach(var time in PeriodProvider.CalculateAvailableTimes(period.Init, period.End, period.Granularity))
                                    {
                                        <span class="col-auto pill me-2 mb-2">@($"{time.ToString("HH:mm")}")</span>
                                    }

                                    periodCounter++;
                                }
                                <div class="d-flex mt-3">
                                    @if (date.Deleted)
                                    {
                                        <button type="button" class="btn btn-secondary" @onclick="@(() => UndeleteDate(date))">Desfazer exclusão</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-danger" @onclick="@(() => DeleteDate(date))">Excluir data</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                };
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public ICollection<ScheduleDate> Dates { get; set; }
    [Parameter] public EventCallback<ICollection<ScheduleDate>> DatesChanged{ get; set; }

    public DateTime BaseDate { get; set; } = DateTime.Now;
    public ICollection<SchedulePeriod> TemporaryConfiguredPeriods { get; set; }
    public ICollection<DateTime> MarkedDates { get; set; } = new List<DateTime>();
    public ICollection<DateTime> TemporarySelectedDates { get; set; } = new List<DateTime>();

    protected override void OnParametersSet()
    {
        UpdateMarkedDates();
    }

    private async Task PeriodsApplied(ICollection<SchedulePeriod> periods)
    {
        Dates ??= new List<ScheduleDate>();
        foreach (var date in TemporarySelectedDates)
        {
            var dateToAdd = Dates.FirstOrDefault(p => p.DateTime.Date == date.Date);

            if(dateToAdd == null)
            {
                dateToAdd = new ScheduleDate
                {
                    DateTime = date
                };

                Dates.Add(dateToAdd);
            }

            dateToAdd.Periods = TemporaryConfiguredPeriods.Select(s => new SchedulePeriod
            {
                Init = new DateTime(date.Year, date.Month, date.Day, s.Init.Hour, s.Init.Minute, 0),
                End = new DateTime(date.Year, date.Month, date.Day, s.End.Hour, s.End.Minute, 0),
                Granularity = s.Granularity
            }).OrderBy(p => p.Init).ToList();
        }

        // Sort dates
        Dates = Dates.OrderBy(p => p.DateTime).ToList();

        // Clear temporary selected dates on calendar
        TemporarySelectedDates.Clear();

        // Update marked dates on calendar
        UpdateMarkedDates();

        // Trigger dates changed
        await DatesChanged.InvokeAsync(Dates);
    }

    private void DeleteDate(ScheduleDate date)
    {
        date.Deleted = true;
    }

    private void UndeleteDate(ScheduleDate date)
    {
        date.Deleted = false;
    }

    private void UpdateMarkedDates()
    {
        MarkedDates = new List<DateTime>();

        if (Dates == null) return;

        foreach (var day in Dates)
        {
            MarkedDates.Add(day.DateTime);
        }
    }

    private void AddMonth(int i)
    {
        BaseDate = BaseDate.AddMonths(i);
    }
}
