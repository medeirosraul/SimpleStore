@using SimpleStore.Core.Services.Products
@using SimpleStore.Core.Entities.Prices
@using SimpleStore.Core.Entities.CatalogItems

@inherits OwningComponentBase
<Form id="product-form" Model="@Model" OnValidSubmit="@Save">
    <TabContainer>
        <Navigation>
            <TabLink Target="item-info" Active>Informações do item</TabLink>
            <TabLink Target="price">Preços</TabLink>
            @if (!string.IsNullOrEmpty(Model.Id))
            {
                <TabLink Target="pictures">Imagens</TabLink>
            }
        </Navigation>
        <Content>
            <TabContent Id="item-info" Active>
                @if (!string.IsNullOrWhiteSpace(Id))
                        {
                <FormField @bind-Value="@Model.Id" Label="ID" InputType="ValueOnly" />
                }
                <FormField @bind-Value="@Model.Published" Label="Publicado" />
                <FormField @bind-Value="@Model.Type" Label="Tipo">
                    <SelectOptions>
                        <option value="@CatalogItemType.Product">Produto</option>
                        <option value="@CatalogItemType.Service">Serviço</option>
                    </SelectOptions>
                </FormField>
                <FormField @bind-Value="@Model.Name" Label="Nome" />
                <FormField @bind-Value="@Model.ShortDescription" Label="Descrição resumida" />
                <FormField @bind-Value="@Model.FullDescription" Label="Descrição completa" />
                <FormField @bind-Value="@Model.Sku" Label="SKU" />
                <FormField @bind-Value="@Model.Gtin" Label="GTIN" />
            </TabContent>

            <TabContent Id="price">
                @if (ActivePrice != null)
                {   
                    <FormField @bind-Value="@ActivePrice.Active" Label="Ativo" />
                    <FormField @bind-Value="@ActivePrice.Value" Label="Valor" />
                    <FormField @bind-Value="@ActivePrice.OldValue" Label="Valor antigo" />
                    <FormField @bind-Value="@ActivePrice.Cost" Label="Custo" />
                }
                @*<Table Context="@Model.Prices">
                    <Head>
                        <tr>
                            <th>Valor</th>
                            <th>Valor antigo</th>
                            <th>Custo</th>
                            <th>Ativo</th>
                        </tr>
                    </Head>
                    <RowTemplate>
                        @{
                            var rowClass = "";
                            if (context.Id == ActivePrice?.Id)
                            {
                                rowClass = "bg-dark text-light";
                            }
                        }
                        <tr class="@rowClass cursor-pointer" @onclick="@(() => SetActivePrice(context.Id))">
                            <td>@context.Value</td>
                            <td>@context.OldValue</td>
                            <td>@context.Cost</td>
                            <td>@context.Active</td>
                        </tr>
                    </RowTemplate>
                </Table>*@
            </TabContent>

            @if (!string.IsNullOrEmpty(Model.Id))
            {
                <TabContent Id="pictures">
                    <CatalogItemPicturesForm CatalogItem="@Model"></CatalogItemPicturesForm>
                </TabContent>
            }

        </Content>
    </TabContainer>
</Form>

@code {
    private ICatalogItemService _catalogItemService;

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public CatalogItem Model { get; set; }

    [Parameter]
    public Price ActivePrice { get; set; }

    [Parameter]
    public EventCallback OnSuccessSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Services
        _catalogItemService = (ICatalogItemService)ScopedServices.GetService(typeof(ICatalogItemService));

        // Model
        Model = new CatalogItem();
        if(!string.IsNullOrWhiteSpace(Id))
            await Load(Id);
    }

    public async Task Save()
    {
        await  _catalogItemService.InsertOrUpdate(Model);
        await OnSuccessSubmit.InvokeAsync();
    }

    public async Task Load(string id)
    {
        Model = await _catalogItemService.GetById(id, true);
        if (Model.Prices == null || !Model.Prices.Any())
        {
            Model.Prices ??= new List<Price>();
            Model.Prices.Add(new Price());
        }

        SetActivePrice();
    }

    public void SetActivePrice(string id = "")
    {
        if (string.IsNullOrEmpty(id))
        {
            ActivePrice = Model.Prices.FirstOrDefault();
        }
    }
}