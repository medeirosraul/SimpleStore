<div class="col-12">
    <h3>
        <button class="btn btn-light" type="button" @onclick="@(async () => await AddMonth(-1))"><span class="iconify" data-icon="fluent:arrow-up-20-regular" data-width="20" data-height="20"></span></button>
        <button class="btn btn-light" type="button" @onclick="@(async () => await AddMonth(1))"><span class="iconify" data-icon="fluent:arrow-down-20-regular" data-width="20" data-height="20"></span></button>
        @BaseDate.ToString("MMMM 'de' yyyy")
    </h3>
    <hr />
</div>

<div class="month col @MonthClasses">
    @for (var week = 0; week < 5; week++)
    {
        <div class="row g-0">
            @for (var day = 0; day < 7; day++)
            {
                var date = _firstDate.AddDays((week * 7) + day);
                <CalendarDay Date="date" OnClick="DateClicked" Checked="IsSelected(date)" Marked="IsMarked(date)"></CalendarDay>
            }
        </div>
    }
</div>

@code {
    private DateTime _firstDate;

    [Parameter]
    public string MonthClasses { get; set; }

    [Parameter]
    public DateTime BaseDate { get; set; }

    [Parameter]
    public EventCallback<DateTime> BaseDateChanged { get; set; }

    [Parameter]
    public ICollection<DateTime> SelectedDates { get; set; } = new List<DateTime>();

    [Parameter]
    public EventCallback<ICollection<DateTime>> SelectedDatesChanged { get; set; }

    [Parameter]
    public ICollection<DateTime> MarkedDates { get; set; } = new List<DateTime>();

    protected override void OnParametersSet()
    {
        CalculateParameters();
    }

    private async Task DateClicked(DateTime date)
    {
        var exists = SelectedDates.Any(p => p.Date == date.Date);

        if (exists)
            SelectedDates.Remove(date);
        else
        {
            SelectedDates.Add(date);
            SelectedDates = SelectedDates.OrderBy(p => p.Date).ToList();
        }

        await SelectedDatesChanged.InvokeAsync(SelectedDates);
    }

    private async Task AddMonth(int i)
    {
        BaseDate = BaseDate.AddMonths(i);
        CalculateParameters();

        await BaseDateChanged.InvokeAsync(BaseDate);
    }

    private bool IsSelected(DateTime date)
    {
        return SelectedDates.Any(p => p.Date == date.Date);
    }

    private bool IsMarked(DateTime date)
    {
        return MarkedDates.Any(p => p.Date == date.Date);
    }

    private void CalculateParameters()
    {
        var firstDayInMonth = new DateTime(BaseDate.Year, BaseDate.Month, 1);

        _firstDate = firstDayInMonth.AddDays((int)firstDayInMonth.DayOfWeek * -1);
    }
}
